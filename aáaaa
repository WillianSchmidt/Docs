class Accordion extends HTMLElement {
    constructor() {
        super();
        this.attachShadow({ mode: 'open' });
    }

    /**
     * Obtém o nome do ícone com base no estado (para checkbox e radio).
     */
    _getIconStateName() {
        let nameIcone = '';

        if (this.type === 'radio') {
            if (this.shadowRoot.querySelector('.contentButton').classList.contains('checked')) {
                nameIcone = 'radio_button_checked';
            } else {
                nameIcone = 'radio_button_unchecked';
            }
        } else if (this.type === 'checkbox') {
            if (this.shadowRoot.querySelector('.contentButton').classList.contains('checked')) {
                nameIcone = 'check_box';
            } else {
                nameIcone = 'check_box_outline_blank';
            }
        }

        return nameIcone;
    }

    /**
     * Renderiza o conteúdo do componente.
     */
    render() {
        let tipoBotao = '';

        // Pegue o tipo do ds-accordions mais próximo.
        const dsAccordions = this.closest('ds-accordions');
        if (dsAccordions) {
            this.type = dsAccordions.getAttribute('type');
        }

        // Define o tipo padrão, caso o atributo type não exista.
        if (!this.type) {
            this.type = 'checkbox'; // ou outro valor padrão, dependendo de sua necessidade
        }

        if (this.type === 'checkbox') {
            tipoBotao = `
                <button role="checkbox">
                    <ds-icon class="selectionIcon" name="check_box_outline_blank" aria-hidden="false"></ds-icon>
                </button>
            `;
        } else if (this.type === 'radio') {
            tipoBotao = `
                <button role="radio">
                    <ds-icon class="selectionIcon" name="radio_button_unchecked" aria-hidden="false"></ds-icon>
                </button>
            `;
        } else if (this.type === 'icon') {
            tipoBotao = `
                <ds-icon name="${this.icon}" aria-hidden="true"></ds-icon>
            `;
        }

        return /*html*/`
            <div class="container">
                <div class="content">
                    <div class="contentButton">
                        ${tipoBotao}
                    </div>
                    <div class="subContent">
                        <span>${this.titulo}</span>
                        <ds-icon class="icon" name="chevron_right" aria-hidden="true"></ds-icon>   
                    </div>    
                </div>
                <div class="panel">
                    <p>${this.texto}</p>
                </div>
            </div>
        `;
    }

    connectedCallback() {
        // Garantir que o atributo type esteja correto.
        const dsAccordions = this.closest('ds-accordions');
        if (dsAccordions) {
            this.type = dsAccordions.getAttribute('type');
        }

        // Chamar render() para gerar o HTML
        this.render();

        const subContent = this.shadowRoot.querySelector('.subContent');
        const panel = this.shadowRoot.querySelector('.panel');
        const iconFinal = this.shadowRoot.querySelector('.icon');
        const contentButton = this.shadowRoot.querySelector('.contentButton');

        // Evento para alternar o estado do botão (checkbox/radio)
        contentButton.addEventListener('click', () => {
            if (this.type === 'checkbox' || this.type === 'radio') {
                this.shadowRoot.querySelector('ds-icon').setAttribute('name', this._getIconStateName());
            }

            // Emitir evento customizado
            const eventButton = new CustomEvent('buttonToggle', {
                detail: {
                    element: this,
                    contentButton: contentButton,
                },
            });
            this.dispatchEvent(eventButton);
        });

        // Evento para alternar o painel de conteúdo
        subContent.addEventListener('click', () => {
            subContent.classList.toggle('active');

            if (panel.classList.contains('open')) {
                panel.classList.remove('open');
                iconFinal.style.transform = 'rotate(-90deg)';
                iconFinal.style.transition = 'transform 0.4s ease';
            } else {
                panel.classList.add('open');
                iconFinal.style.transform = 'rotate(90deg)';
                iconFinal.style.transition = 'transform 0.4s ease';
            }

            // Emitir evento customizado
            const event = new CustomEvent('panelToggle', {
                detail: {
                    element: this,
                    panel: panel,
                },
            });
            this.dispatchEvent(event);
        });
    }
}

// Registra o componente no HTML
customElements.define('accordion-component', Accordion);
