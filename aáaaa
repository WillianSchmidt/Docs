import Component from './Bmoscpha_Component.js';
import DisableableMixin from './Bmoscpha_DisableableMixin.js';
import { PropString, PropBoolean } from './Bmoscpha_Prop.js';
import './Bmoscpha_Icon.js';

/**
 * Define o componente Accordions, container contendo um grid de vários componentes Accordion.
 */
export default class Accordions extends Component {
    /**
     * Define o nome da tag do componente Bullets: `<ds-accordions>`.
     */
    static get componentName() {
        return 'accordions';
    }

    /**
     * Define as propriedades do componente.
     */
    static get props() {
        return [
            ...super.props, // herda do método estático da superclasse
            new PropBoolean('shape'),
            new PropBoolean('colorful'),
        ];
    }

    /**
     * Define os estilos CSS do componente Accordions.
     */
    static get styles() {
        return /*css*/`
            :host ::slotted(ds-accordion) {
                min-width: 93px;
                width: calc((100% - (var(--ds-spacing-04) * 3)) / 3);
            }

            :host([colorful]) ::slotted(ds-accordion) {
                --bullet-background: var(--ds-color-action);
                --bullet-background-active: var(--ds-color-action-pressed);
                --label-color: var(--ds-color-action-light);,
                --icon-colorful: var(--ds-color-text-normal);
                --icon-background: var(--ds-color-ui-surface);
            }

            :host([shape]) ::slotted(ds-accordion) {
                --icon-background: var(--ds-color-ui-surface);
            }
        `;
    }

    /**
     * Método sobrescrito da classe Component que renderiza o componente no DOM.
     */
    render() {
        return /*html*/`
            <slot></slot>
        `;
    }
}

Component.register(Accordions);

/**
 * Classe que define o componente Accordion.
*/
export class Accordion extends DisableableMixin(Component) {
    /**
     * Define o nome da tag do componente Accordion: `<ds-accordion>`.
     */
    static get componentName() {
        return 'accordion';
    }

    /**
     * Define as propriedades do componente. Accordion por unidade
     */
    static get props() {
        return [
            ...super.props, // herda do método estático da superclasse
            new PropString('icon'),
            new PropString('titulo'),
            new PropString('texto'),
        ];
    }

    /**
     * Define os estilos CSS do componente. Unico Accordion
     */
    static get styles() {
        return /*css*/`
            :host {
                --bullet-background: transparent;
                --bullet-flex-direction: column;
                --bullet-background-active: var(--ds-color-ui-surface);
                --bullet-align-items: flex-start;
                --icon-color: var(--ds-color-action);
                --icon-color-active: var(--ds-color-action-pressed);
                --label-color: var(--ds-color-text-normal);
                --icon-background:transparent;                
            }

            .accordion {
                background-color: #eee;
                color: #444;
                cursor: pointer;
                padding: 18px;
                width: 100%;
                border: none;
                text-align: left;
                outline: none;
                font-size: 15px;
                transition: 0.4s;
              }
              
              .active, .accordion:hover {
                background-color: #ccc;
              }
              
              .accordion:after {
                content: '+';
                color: #777;
                font-weight: bold;
                float: right;
                margin-left: 5px;
              }
              
              .active:after {
                content: "-";
              }
              
              .panel {
                padding: 0 18px;
                background-color: white;
                max-height: 0;
                overflow: hidden;
                transition: max-height 0.2s ease-out;
              }

        `;
    }

    /**
     * Método sobrescrito da classe Component que renderiza o componente no DOM.
     */
    render() {

        const tituloBullet = this.titulo ? `<span class="titulo">${this.titulo}</span>` : '';
        const textoBullet = this.texto ? `<span class="texto">${this.texto}</span>` : '';
        
        return /*html*/`
            <div class="container">
                <button class="accordion">${this.titulo}</button>
                <div class="panel">
                    <p>${this.texto}</p>
                </div>
            </div>
        `;
    }

     /**
     * Executa um clique no componente.
     */
     click() {
        // repassa o clique para o button.
        this.shadowRoot.querySelector('button').click();
    }

    connectedCallback() {
        this.addEventListener('click', this._onClick);
    }

    disconnectedCallback() {
        this.removeEventListener('click', this._onClick);
    }

    _onClick() {
        this._toggleAccordion();
    }

    _toggleAccordion() {
       // Seleciona o elemento único do acordeão
        var acc = document.querySelector(".accordion");

        // Alterna a classe 'active' no botão
        this.classList.toggle("active");

        // Seleciona o painel associado ao botão
        var panel = this.nextElementSibling;

        // Controla a exibição do painel
        if (panel.style.display === "block") {
            panel.style.display = "none";
        } else {
            panel.style.display = "block";
        }

        // Cria e dispara o evento personalizado
        var customEvent = new CustomEvent("accordionToggle", {
            detail: {
            element: this,
            panel: panel,
            isActive: this.classList.contains("active"),
            },
        });
        this.dispatchEvent(customEvent);
        

        // Escuta o evento personalizado para executar lógica adicional
        acc.addEventListener("accordionToggle", function (e) {
        console.log("Acordeão alterado:", e.detail);
        // Insira aqui a lógica adicional (ex.: animações ou integrações).
        });
    }
    
    launch() {
        var acc = document.getElementsByClassName("accordion");
        var i;

        for (i = 0; i < acc.length; i++) {
        acc[i].addEventListener("click", function() {
            this.classList.toggle("active");
            var panel = this.nextElementSibling;
            if (panel.style.maxHeight) {
            panel.style.maxHeight = null;
            } else {
            panel.style.maxHeight = panel.scrollHeight + "px";
            } 
        });
        }
    }
}
// registra o componente para ser usado no HTML
Component.register(Accordion);
